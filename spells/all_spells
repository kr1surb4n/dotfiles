git rebase main
git rebase working
git switch main && git rebase working && git switch working
ebook-convert INDEX_FILE.HTML EBOOK_NAME.epub
wget -E -k -rp --convert-links https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html
wget -r https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html
sudo shutdown -h +60
sudo sysctl fs.inotify.max_user_watches=100000
ansible localhost -a 'ping -w 1 192.168.8.108'
ansible localhost -a 'whoami' -u git
ansible localhost -a 'whoami' -u jerry
cat log | awk -e '{for(i=6; i<=NF; ++i) printf "%s ", $i; print ""}'
docker container ls
docker container ls -a
iptables -I INPUT 1 -i eth0 -p tcp --dport 8080 -j ACCEPT
sudo useradd -g ziomeczki -m -p password flowi
sudo usermod -aG sudo user
cat /etc/os-release; echo ; lsb_release -a ; echo ; hostnamectl ; echo ; uname -r 
ansible_command
git filter-branch -f --env-filter "GIT_AUTHOR_NAME='Oren'; GIT_AUTHOR_EMAIL='redcat7@gmail.com'; GIT_COMMITTER_NAME='Przemek'; GIT_COMMITTER_EMAIL='przemyslaw.kot@gmail.com';" HEAD
echo $DESKTOP_SESSION
echo $TMUXP_CONFIGDIR
sudo fuser -v 9000/tcp
cleardirtynotes
sudo rsync -av .config/google-chrome profiles/browsers/airflow-gc
sudo rsync -av .mozilla/firefox/gpi768bj.default-release profiles/browsers/devops-ff
diff -qr folder1/ folder2/
spot
nano $GIT_COMMANDS_FILE
spelledit
nano $TELEPORTS
spellsave
find . -name "*file*" -not -path ".git"
fkill
sudo apt --fix-broken install
foxer funs
gs | grep deleted | awk '{ print  }' | xargs git rm
kit
goto
sudo groupadd ziomeczk
vainfo
foxer job_search
linkdocs
du -ha . | sort -n -r | head -n 20
for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done | sort -k 2 -n -r | less
for file in /proc/*/status ; do awk '/VmSwap|Name/{printf $2 " " $3}END{ print ""}' $file; done
ssh-add ~/.ssh/github/id_github_kris
direnv allow .; > .envrc
mark
history | awk '{print $2}' | sort | uniq -c | sort -rn | head
rsync -rv --include '*/' --include '*.js' --exclude '*' --prune-empty-dirs Source/ Target/
echo "dupa" & 2>/dev/null 1>&2
foxer "$(ls $HOME/profiles/browsers | while read folder ; do echo "${folder%-ff}" ; done | while read folder; do echo "${folder%-gc}" ; done | fzf)" &
sudo intel_gpu_top
foxer PLOTECZKI
putgtignore
source ~/.coat/coat.sh
source ~/.bashrc
source ~/.coat/modules/spells.sh
sudo systemctl disable service
chmod -t TARGET_PATH; chmod 0777 TARGET_PATH
i3-rename
read -ep "Tmux window name: " window_name && tmux rename-window $window_name
watchmedo shell-command -W --patterns="*.py" --recursive --command='make test' .
bookmarkfolder
dirtynotes
bookmarkfolder
sudo nmap -sS 192.168.8.*
foxer searching
fmans
chmod 1000 TARGET_PATH
chmod +t TARGET_PATH
shellsnip
service --status-all
netstat -A inet -pa
echo "show ips" ifconfig -a | grep inet
du -hs */ | sort -hr | head
fmans
find . -type f -mtime +1 -mtime -30 ! -path "*.git*"
find . -type f -mtime +1 -mtime -60 ! -path "*.git*"
find . -type f -mtime +1 -mtime -7 ! -path "*.git*"
find . -maxdepth 2 -type d -mtime +1 -mtime -35 ! -path "*.git*" ! -path "*.venv*"
netstat -r
ss -p
watchmedo shell-command -W --patterns="*" --recursive --command='autosave' .
watson_start
tmuxp load main
tmuxp load klein
php -S 127.0.0.1:8000
runserver
tmuxp load trusc_workshop
tmuxp load mytrusc_workshop
tmuxp load wp_workshop
watson_stop
cdg
echo "\"1: ${1}\" \"2: ${2}\" \"3: ${3}\" \"4: ${4}\" \"5: ${5}\"  "
echo "testing"; echo "$(fill 'podaj tekst: ')"; mkdir "$(fill 'to bedzie folder: ')"
mkdir "$(fill 'to bedzie folder: ')"
fc-cache -vf ~/.fonts
makecookie
echo "virtualbox squid postgresql mysql openvpn" | xargs -I {} sudo service {} stop
sudo runlevel
echo $XDG_CURRENT_DESKTOP
foxer working
find . -type f | awk -F. '!a[$NF]++{print $NF}'
firefox --profile ./main_mozilla_profile
ls | tr . ' ' | awk '{ print $1 }' | xargs -I{} mv {}.brc {}.sh
mysql -u username -p database_name < file.sql
sudo update-alternatives --config php
sudo update-alternatives --config python
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 2
sudo useradd -G postgres,mysql,git,docker,ssh -m -p "$(fill 'password: ')" -s /bin/bash jerry
ls -lta
for f in *; do mv "$f" `echo $f | tr ' ' '_'`; done
find . -name "* *" -type d | rename 's/ /_/g'    # do the directories first
find . -name "* *" -type f | rename 's/ /_/g'
rename "s/\s+//g" *
awk -F. '{print $NF}' file
find . -type f -name '*.*' | sed 's|.*\.||' | sort -u
stat -c %w ./33jkzlk.jpeg
date --date="$(stat -c %w ./33jkzlk.jpeg)" +%Y%m
replace PATH OLD NEW
find docs/ -name $1 -exec cp --parents '{}' ~/$2/$3 \;
find . -name "*.php" -exec sed -i -e 's/PLUGIN_NAME/DONATE_PAYU/g' {} +
find . -type f -iname "*.java" -exec grep -L "something somethin" {} \+
find . -type f  -exec du -h {} + | sort -r -h
find . -type f -ls | grep "$1"
find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\n'| sort -n | tail -n1
find -ls
open_nautilus
processids $@
kknd $1
wtfis $1
sudo useradd -G $(fil 'Groups (postgres,mysql,git,docker,ssh): ') -m -p $(fill 'password: ') -s /bin/bash $(fill 'username: ')
replace where what with
lastline PATH
lastcommand
lc word
uc word
whenis timestamp
htmlEntityToUTF8
UTF8toHtmlEntity
extract
stripspace
calc
rand_int
passwdgen
targz
fs path 
ff
fstr path 
file_backup_compressed path
file_backup path 
file_information path
shorturl url 
json string 
escape string 
unidecode string 
note 'title' 'body'
note_show
print_all_colors
t path searched 
posix
mark
spot
goto 
bookmarkfolder
phpserver
runserver
lefthandmouse
righthandmouse
makeacookie
zzz
echo -e ${PATH//:/\\n}
reload
sgrep 
date_iso_8601
date_clean
date_year
date_month
date_week
date_day
date_hour
date_minute
date_second
date_time
timer
emptytrash
getclip
putclip
dec2hex value
urldecode
urlencode
rot13
inf
testConnection
mount_info
os-info
cleanTheSystem
command_exists
duh path 
cpuinfo
processids name 
fkill
meminfo
psmem
psmem5
psmem10
pscpu
pscpu5
pscpu10
psx name
pst name
psmy
loadavg
partitions
du
du_overview
df
ls -ratcl
find . -ctime 0 | sort -r
find . -ctime -40 | sort -r
find . -mtime -40 | sort -r
sudo fuser -v $(fill 'Port (i.e 9000/tcp): ')

find ansible_lib/ -name "*" | while read afile; do colordiff $afile "docs/${afile}"; done > the_difference_of_ansible_lib
journalctl --dmesg --follow
journalctl --no-tail -b -o cat -fu dhcpcd@eth0
journalctl --no-tail -b -o cat -fu dhcpcd@wlan0
journalctl --no-tail -b -o cat -fu wpa_supplicant@wlan0
journalctl -u "sshd@*"
journalctl /usr/bin/sshd
journalctl _COMM=sshdecho "open nautilus"; open_nautilus
repo
optiImages
watson projects
watson start -c -b $(fill 'Project name: ') $(fill 'tags (+tag1 +tag2...): ')
read tags; watson projects | fzf | xargs -I{} watson start {} $tags
watson stop
watson restart
watson status
watson log
watson cancel
switchpython
makevenv
makeactive
black
installrequirements
insert_line_with_fzf
connect_with_ssh
linkdocs
edocs
putgitignore
fmans
grep -vP $(fill 'Perl Regexp: ') $(fill 'Rest: ')
grep -P $(fill 'Perl Regexp: ') $(fill 'Rest: ')

mysql -u $(fill 'Username: ') -p $(fill 'Database: ') < database.sqlecho "list all IPs"; ifconfig -a | grep inet | awk '{ print $2 }'
ips
sudo netdiscovery -p
netstat_used_local_ports
netstat_free_local_port
netstat_connection_overview
sniff 
httpdump
iptablesBlockIP IP
logssh host 
lsssh
getcertnames domain.com
httpDebug url 
digga domain.org 
o
tre
myip_dns
myip_http
dnsInfo
speedtest
lsport
llport
netlisteners 
git fetch --all --tags --prune
git fetch --all --tags
git reset $(choose_commit)
git reset --hard $(choose_commit)
git reset --hard && git clean -dfx
git clean -fd
git merge $(choose_branch)
git status
git status -s
git submodule update --init --recursive
git rebase $(choose_branch)
git push origin $(choose_branch)
git push --tags -f
git pull origin master --allow-unrelated-histories && git merge origin origin/master
git pull
git remote
git remote -v
git diff
git diff --staged
git diff -w "$@" | vim -R -
git commit --interactive
git branch -d $(choose_branch)
git branch -D $(choose_branch)
git shortlog -sn
git archive --format zip --output
git log --graph --pretty=oneline --abbrev-commit
git log --graph --pretty=format:'%C(bold)%h%Creset%C(magenta)%d%Creset %s %C(yellow)<%an> %C(cyan)(%cr)%Creset' --abbrev-commit --date=relative"
git whatchanged
git stash
git stash branch
git stash drop
git stash list
git stash pop
git add -i
git ls-files . --ignored --exclude-standard --others
git ls-files . --exclude-standard --others
git log HEAD@{1}..HEAD@{0}
git commit -a --amend -C HEAD
fbr
fco
git switch -c $(fill 'Branch name:')
git switch -c working
removeworking
newwork
showgitlogs
squashcurrent
docker container ls
docker container ls -a
docker-compose up
docker-compose down
read -p 'container: ' container;read -p 'command: ' command; docker-compose exec $container $command
docker-compose rm; docker volume prune
echo "docker update; docker-compose pull
docker build -t $(IMAGE_NAME):latest .
docker volume rm $(docker volume ls -qf dangling=true); docker volume ls -qf dangling=true | xargs -r docker volume rm
docker ps
docker ps -a
docker rm $(docker ps -qa --no-trunc --filter "status=exited")
docker exec -it $(CONTAINER_NAME) /bin/bash
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)
docker rmi $(docker images | grep "none" | awk '/ / { print $3 }')
docker network ls
docker network ls | grep "bridge"
docker network rm $(docker network ls | grep "bridge" | awk '/ / { print $1 }') 
docker volume prune
docker rmi $(IMAGE_NAME)
docker rm $(CONTAINER_NAME)
docker start $(CONTAINER_NAME)
docker stop $(CONTAINER_NAME)
docker restart $(CONTAINER_NAME)
docker inspect $(CONTAINER_NAME)
docker logs $(CONTAINER_NAME)
sudo -u postgres psql
sudo createuser -U postgres -d -e -E -l -P -r -s red
